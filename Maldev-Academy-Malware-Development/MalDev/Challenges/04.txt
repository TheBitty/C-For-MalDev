 Writing Custom Shellcode 
In this challenge, we will be writing custom shellcode in C/C++ instead of how it is usually done in pure assembly. When writing shellcode, you need to consider the following:

1. Direct usage of Windows API functions is not possible, instead, a custom GetProcAddress implementation must be employed to dynamically resolve these functions.

2. Due to the absence of sections like .data or .rdata in raw shellcode, strings and other data must reside on the stack. Consequently, the .text section becomes the sole reliable option, as it is the only part extracted from the compiled executable after code writing.

When executing the shellcode entrypoint, it is crucial to align the stack by 16-bytes, as specified in the official Microsoft documentation (referenced in the resource section). This alignment requirement must be taken into account while attempting to execute the entrypoint, which represents the first code executed when loading and running the shellcode in memory.

So when it comes to writing shellcode you just need to write your code in a normal project and compile it as an executable and extract the text section of the compiled executable and save it under a new file (your shellcode binary file).

Try to write a simple and small shellcode binary that pops a small message box or try to stage a Meterpreter shellcode over HTTP/s using WinHTTP.

Resources:
- https://github.com/Cracked5pider/ShellcodeTemplate
- https://learn.microsoft.com/en-us/cpp/build/stack-usage?view=msvc-170#stack-allocation
